# Generated by Django 5.2.6 on 2025-09-11 02:39

import apps.customers.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('org', '0005_alter_empresa_options_alter_empresaconfig_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_persona', models.CharField(choices=[('FISICA', 'Persona física'), ('JURIDICA', 'Persona jurídica')], default='FISICA', help_text='Determina qué campos son obligatorios/esperados.', max_length=8)),
                ('nombre', models.CharField(blank=True, max_length=120)),
                ('apellido', models.CharField(blank=True, max_length=120)),
                ('razon_social', models.CharField(blank=True, help_text='Para personas jurídicas; opcional en físicas.', max_length=200)),
                ('documento', models.CharField(blank=True, help_text='DNI/CUIT u otro identificador. Único por empresa si no vacío.', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='Único por empresa si no vacío.', max_length=254, validators=[django.core.validators.EmailValidator(message='Email inválido.')])),
                ('tel_wpp', models.CharField(blank=True, help_text='Formato E.164. Único por empresa si no vacío.', max_length=20, validators=[django.core.validators.RegexValidator(message='Teléfono debe estar en formato internacional E.164 (p.ej. +549381123456).', regex='^\\+[1-9]\\d{7,14}$')])),
                ('tel_busqueda', models.CharField(blank=True, help_text='Teléfono sin símbolos para búsquedas rápidas (mantener en services).', max_length=20)),
                ('fecha_nac', models.DateField(blank=True, null=True)),
                ('direccion', models.CharField(blank=True, max_length=255)),
                ('localidad', models.CharField(blank=True, max_length=120)),
                ('provincia', models.CharField(blank=True, max_length=120)),
                ('cp', models.CharField(blank=True, max_length=12, verbose_name='código postal')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Lista de etiquetas simples (p.ej. ["vip", "empresa"]).')),
                ('notas', models.TextField(blank=True)),
                ('activo', models.BooleanField(default=True)),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('modificado', models.DateTimeField(auto_now=True)),
                ('creado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clientes_creados', to=settings.AUTH_USER_MODEL)),
                ('empresa', models.ForeignKey(help_text='Lavadero propietario del cliente (aislamiento por empresa).', on_delete=django.db.models.deletion.CASCADE, related_name='clientes', to='org.empresa')),
            ],
            options={
                'verbose_name': 'cliente',
                'verbose_name_plural': 'clientes',
                'ordering': ['razon_social', 'apellido', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='ClienteFacturacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razon_social', models.CharField(help_text='Razón social para el comprobante.', max_length=200)),
                ('cuit', models.CharField(blank=True, help_text='CUIT (11 dígitos). Requerido salvo Consumidor Final.', max_length=20, validators=[apps.customers.models.validar_cuit])),
                ('cond_iva', models.CharField(choices=[('RI', 'Responsable Inscripto'), ('MONO', 'Monotributo'), ('EXENTO', 'Exento'), ('CF', 'Consumidor Final')], default='CF', help_text='Condición frente al IVA del receptor del comprobante.', max_length=6)),
                ('domicilio_fiscal', models.CharField(blank=True, max_length=255)),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('modificado', models.DateTimeField(auto_now=True)),
                ('cliente', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='facturacion', to='customers.cliente')),
            ],
            options={
                'verbose_name': 'datos de facturación',
                'verbose_name_plural': 'datos de facturación',
            },
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['empresa', 'nombre'], name='customers_c_empresa_4e969a_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['empresa', 'apellido'], name='customers_c_empresa_554c95_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['empresa', 'razon_social'], name='customers_c_empresa_bee65d_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['empresa', 'documento'], name='customers_c_empresa_fe3e4d_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['empresa', 'tel_wpp'], name='customers_c_empresa_97dd57_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['empresa', 'tel_busqueda'], name='customers_c_empresa_e403af_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['empresa', 'email'], name='customers_c_empresa_7ca700_idx'),
        ),
        migrations.AddConstraint(
            model_name='cliente',
            constraint=models.UniqueConstraint(condition=models.Q(('documento__isnull', False), models.Q(('documento', ''), _negated=True)), fields=('empresa', 'documento'), name='uniq_cliente_documento_por_empresa'),
        ),
        migrations.AddConstraint(
            model_name='cliente',
            constraint=models.UniqueConstraint(condition=models.Q(('email__isnull', False), models.Q(('email', ''), _negated=True)), fields=('empresa', 'email'), name='uniq_cliente_email_por_empresa'),
        ),
        migrations.AddConstraint(
            model_name='cliente',
            constraint=models.UniqueConstraint(condition=models.Q(('tel_wpp__isnull', False), models.Q(('tel_wpp', ''), _negated=True)), fields=('empresa', 'tel_wpp'), name='uniq_cliente_tel_por_empresa'),
        ),
        migrations.AddConstraint(
            model_name='cliente',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('razon_social__isnull', False), models.Q(('razon_social', ''), _negated=True)), models.Q(('nombre__isnull', False), models.Q(('nombre', ''), _negated=True)), models.Q(('apellido__isnull', False), models.Q(('apellido', ''), _negated=True)), _connector='OR'), name='chk_cliente_identidad_minima'),
        ),
        migrations.AddConstraint(
            model_name='clientefacturacion',
            constraint=models.CheckConstraint(condition=models.Q(('cond_iva', 'CF'), models.Q(('cuit__isnull', False), models.Q(('cuit', ''), _negated=True)), _connector='OR'), name='chk_facturacion_cuit_requerido_si_no_cf'),
        ),
    ]
